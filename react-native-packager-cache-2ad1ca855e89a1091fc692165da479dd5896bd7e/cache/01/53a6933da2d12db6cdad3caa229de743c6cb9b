Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/vh/Documents/Qkn/Sample/SampleProject/node_modules/react-native-pathjs-charts/src/Pie.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _reactNativeSvg = require('react-native-svg');

var _reactNativeSvg2 = babelHelpers.interopRequireDefault(_reactNativeSvg);

var _util = require('./util');

var _lodash = require('lodash');

var _lodash2 = babelHelpers.interopRequireDefault(_lodash);

require('babel-polyfill');

var Pie = require('paths-js/pie');

var PieChart = function (_Component) {
  babelHelpers.inherits(PieChart, _Component);

  function PieChart() {
    babelHelpers.classCallCheck(this, PieChart);
    return babelHelpers.possibleConstructorReturn(this, (PieChart.__proto__ || Object.getPrototypeOf(PieChart)).apply(this, arguments));
  }

  babelHelpers.createClass(PieChart, [{
    key: 'color',
    value: function color(i) {
      var color = this.props.color || this.props.options && this.props.options.color;
      if (Array.isArray(color)) {
        if (i >= color.length) {
          var pallete = _util.Colors.mix(color[i % color.length]);
          return _util.Colors.string((0, _util.cyclic)(pallete, i));
        }
        return color[i];
      } else {
        if (color && !_lodash2.default.isString(color)) color = color.color;
        var _pallete = this.props.pallete || this.props.options && this.props.options.pallete || _util.Colors.mix(color || '#9ac7f7');
        return _util.Colors.string((0, _util.cyclic)(_pallete, i));
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var noDataMsg = this.props.noDataMessage || 'No data available';
      if (this.props.data === undefined) return _react2.default.createElement(
        _reactNative.Text,
        {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 70
          }
        },
        noDataMsg
      );

      var options = new _util.Options(this.props);

      var x = options.chartWidth / 2 - (options.margin.left || 0);
      var y = options.chartHeight / 2 - (options.margin.top || 0);

      var radius = Math.min(x, y);

      var r = this.props.r;
      r = isNaN(r) ? this.props.options && this.props.options.r : r;
      r = isNaN(r) ? radius / 2 : r;

      var R = this.props.R;
      R = R || this.props.options && this.props.options.R;
      R = R || radius;

      var _ref = this.props.center || this.props.options && this.props.options.center || [x, y],
          _ref2 = babelHelpers.slicedToArray(_ref, 2),
          centerX = _ref2[0],
          centerY = _ref2[1];

      var textStyle = (0, _util.fontAdapt)(options.label);

      var slices = void 0;

      if (this.props.data.length === 1) {
        var item = this.props.data[0];
        var outerFill = item.color && _util.Colors.string(item.color) || this.color(0);
        var innerFill = this.props.monoItemInnerFillColor || '#fff';
        var stroke = typeof fill === 'string' ? outerFill : _util.Colors.darkenColor(outerFill);
        slices = _react2.default.createElement(
          _reactNativeSvg.G,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 99
            }
          },
          _react2.default.createElement(_reactNativeSvg.Circle, { r: R, cx: centerX, cy: centerY, stroke: stroke, fill: outerFill, __source: {
              fileName: _jsxFileName,
              lineNumber: 100
            }
          }),
          _react2.default.createElement(_reactNativeSvg.Circle, { r: r, cx: centerX, cy: centerY, stroke: stroke, fill: innerFill, __source: {
              fileName: _jsxFileName,
              lineNumber: 101
            }
          }),
          _react2.default.createElement(
            _reactNativeSvg.Text,
            { fontFamily: textStyle.fontFamily,
              fontSize: textStyle.fontSize,
              fontWeight: textStyle.fontWeight,
              fontStyle: textStyle.fontStyle,
              fill: textStyle.fill,
              textAnchor: 'middle',
              x: centerX,
              y: centerY - R + (R - r) / 2, __source: {
                fileName: _jsxFileName,
                lineNumber: 102
              }
            },
            item.name
          )
        );
      } else {
        var chart = Pie({
          center: [centerX, centerY],
          r: r,
          R: R,
          data: this.props.data,
          accessor: this.props.accessor || (0, _util.identity)(this.props.accessorKey)
        });

        slices = chart.curves.map(function (c, i) {
          var fill = c.item.color && _util.Colors.string(c.item.color) || _this2.color(i);
          var stroke = typeof fill === 'string' ? fill : _util.Colors.darkenColor(fill);
          return _react2.default.createElement(
            _reactNativeSvg.G,
            { key: i, __source: {
                fileName: _jsxFileName,
                lineNumber: 125
              }
            },
            _react2.default.createElement(_reactNativeSvg.Path, { d: c.sector.path.print(), stroke: stroke, fill: fill, fillOpacity: 1, __source: {
                fileName: _jsxFileName,
                lineNumber: 126
              }
            }),
            _react2.default.createElement(
              _reactNativeSvg.G,
              { x: options.margin.left, y: options.margin.top, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 127
                }
              },
              _react2.default.createElement(
                _reactNativeSvg.Text,
                { fontFamily: textStyle.fontFamily,
                  fontSize: textStyle.fontSize,
                  fontWeight: textStyle.fontWeight,
                  fontStyle: textStyle.fontStyle,
                  fill: textStyle.fill,
                  textAnchor: 'middle',
                  x: c.sector.centroid[0],
                  y: c.sector.centroid[1], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 128
                  }
                },
                c.item.name
              )
            )
          );
        });
      }

      var returnValue = _react2.default.createElement(
        _reactNativeSvg2.default,
        { width: options.width, height: options.height, __source: {
            fileName: _jsxFileName,
            lineNumber: 142
          }
        },
        _react2.default.createElement(
          _reactNativeSvg.G,
          { x: options.margin.left, y: options.margin.top, __source: {
              fileName: _jsxFileName,
              lineNumber: 143
            }
          },
          slices
        )
      );

      return returnValue;
    }
  }, {
    key: 'defaultRange',
    get: function get() {
      return _lodash2.default.map(Array(this.props.data && this.props.data.length), function () {
        return 0;
      });
    }
  }]);
  return PieChart;
}(_react.Component);

PieChart.defaultProps = {
  options: {
    margin: { top: 20, left: 20, right: 20, bottom: 20 },
    width: 600,
    height: 600,
    color: '#2980B9',
    r: 100,
    R: 200,
    legendPosition: 'topLeft',
    animate: {
      type: 'oneByOne',
      duration: 200,
      fillTransition: 3
    },
    label: {
      fontFamily: 'Arial',
      fontSize: 14,
      bold: true,
      color: '#ECF0F1'
    }
  }
};
exports.default = PieChart;