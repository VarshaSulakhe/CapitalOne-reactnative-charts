Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/vh/Documents/Qkn/Sample/SampleProject/node_modules/react-native-pathjs-charts/src/Scatterplot.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _reactNativeSvg = require('react-native-svg');

var _reactNativeSvg2 = babelHelpers.interopRequireDefault(_reactNativeSvg);

var _util = require('./util');

var _Axis = require('./Axis');

var _Axis2 = babelHelpers.interopRequireDefault(_Axis);

var _lodash = require('lodash');

var _lodash2 = babelHelpers.interopRequireDefault(_lodash);

require('babel-polyfill');

var Stock = require('paths-js/stock');

var Scatterplot = function (_Component) {
  babelHelpers.inherits(Scatterplot, _Component);

  function Scatterplot() {
    babelHelpers.classCallCheck(this, Scatterplot);
    return babelHelpers.possibleConstructorReturn(this, (Scatterplot.__proto__ || Object.getPrototypeOf(Scatterplot)).apply(this, arguments));
  }

  babelHelpers.createClass(Scatterplot, [{
    key: 'getMaxAndMin',
    value: function getMaxAndMin(chart, key, scale) {
      var maxValue = void 0;
      var minValue = void 0;
      _lodash2.default.each(chart.curves, function (serie) {
        var values = _lodash2.default.map(serie.item, function (item) {
          return item[key];
        });

        var max = _lodash2.default.max(values);
        if (maxValue === undefined || max > maxValue) maxValue = max;
        var min = _lodash2.default.min(values);
        if (minValue === undefined || min < minValue) minValue = min;
      });
      return {
        minValue: minValue,
        maxValue: maxValue,
        min: scale(minValue),
        max: scale(maxValue)
      };
    }
  }, {
    key: 'render',
    value: function render() {
      var noDataMsg = this.props.noDataMessage || 'No data available';
      if (this.props.data === undefined) return _react2.default.createElement(
        _reactNative.Text,
        {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 105
          }
        },
        noDataMsg
      );

      var options = new _util.Options(this.props);
      var accessor = function accessor(key) {
        return function (x) {
          return x[key];
        };
      };

      var chart = Stock({
        data: this.props.data,
        xaccessor: accessor(this.props.xKey),
        yaccessor: accessor(this.props.yKey),
        width: options.chartWidth,
        height: options.chartHeight,
        closed: false
      });

      var chartArea = {
        x: this.getMaxAndMin(chart, this.props.xKey, chart.xscale),
        y: this.getMaxAndMin(chart, this.props.yKey, chart.yscale),
        margin: options.margin
      };

      var colors = (0, _util.styleSvg)({}, options);
      var points = _lodash2.default.map(chart.curves, function (c) {
        return _lodash2.default.map(c.line.path.points(), function (p, j) {
          var render = _react2.default.createElement(
            _reactNativeSvg.G,
            { key: 'k' + j, x: p[0], y: p[1], __source: {
                fileName: _jsxFileName,
                lineNumber: 132
              }
            },
            _react2.default.createElement(_reactNativeSvg.Circle, babelHelpers.extends({}, colors, { cx: 0, cy: 0, r: options.r || 5, fillOpacity: 1, __source: {
                fileName: _jsxFileName,
                lineNumber: 133
              }
            }))
          );

          return render;
        }, this);
      }, this);

      return _react2.default.createElement(
        _reactNativeSvg2.default,
        { width: options.width, height: options.height, __source: {
            fileName: _jsxFileName,
            lineNumber: 140
          }
        },
        _react2.default.createElement(
          _reactNativeSvg.G,
          { x: options.margin.left, y: options.margin.top, __source: {
              fileName: _jsxFileName,
              lineNumber: 141
            }
          },
          points,
          _react2.default.createElement(_Axis2.default, { scale: chart.xscale, options: options.axisX, chartArea: chartArea, __source: {
              fileName: _jsxFileName,
              lineNumber: 143
            }
          }),
          _react2.default.createElement(_Axis2.default, { scale: chart.yscale, options: options.axisY, chartArea: chartArea, __source: {
              fileName: _jsxFileName,
              lineNumber: 144
            }
          })
        )
      );
    }
  }]);
  return Scatterplot;
}(_react.Component);

Scatterplot.defaultProps = {
  xKey: '',
  yKey: '',
  options: {
    width: 600,
    height: 600,
    margin: { top: 40, left: 60, bottom: 30, right: 30 },
    fill: '#2980B9',
    stroke: '#3E90F0',
    animate: {
      type: 'delayed',
      duration: 200,
      fillTransition: 3
    },
    label: {
      fontFamily: 'Arial',
      fontSize: 14,
      bold: true,
      color: '#34495E'
    },
    axisX: {
      showAxis: true,
      showLines: true,
      showLabels: true,
      showTicks: true,
      zeroAxis: false,
      orient: 'bottom',
      label: {
        fontFamily: 'Arial',
        fontSize: 14,
        bold: true,
        color: '#34495E'
      }
    },
    axisY: {
      showAxis: true,
      showLines: true,
      showLabels: true,
      showTicks: true,
      zeroAxis: false,
      orient: 'left',
      label: {
        fontFamily: 'Arial',
        fontSize: 14,
        bold: true,
        color: '#34495E'
      }
    }
  }
};
exports.default = Scatterplot;